10814
vector엔 size와 capacity가 있다.

capacity는 메모리만 할당하는것.
그 메모리 주소를 사용할 수 있게 vector에게 할당만 해준 상태고 push_back이나 emplace_back, resize를 하지 않으면
operator[]를 이용해서 vector[3] 과 같이 접근했을때 이용을 할 수 없는 그런 공간인거

size는 말그대로 push, emplace, resize를 통해 실제 그 메모리 주소에 사용하는 값이 매칭 된 상태인것.

여기서 나온게 resize()함수랑 reserve()함수
resize()는 해당하는 크기만큼 size를 늘려주고 0으로 초기화해서 만들어줌

reserve()함수는 공간만 할당해서 vector에 push, emplace를 할때 공간이 모자라서 reallocation이 발생하는걸 줄여주는 용도
크기를 정확하게 알 수 없을 때? 적절한 크기만큼 allocation해서 reallocation이 성능을 잡아먹는 현상을 줄이게..

resize()는 음 입력받을 크기를 정확하게 알고 있거나 0으로 싹 초기화해야할때 사용하면 좋을듯

※capacity가 늘어나는 방식?
기본적으로 capacity가 꽉차서 늘려야할때(push나 emplace요청이 발생했을때 capacity가 full인경우) 현재 capacity의 2배로 늘어나는것으로 알고 있다.
컴파일러마다 다를 수 있음


#include <iostream>
#include <vector>

int main() {
    std::vector<int> v;
    v.reserve(1);  // 초기 capacity 설정

    for (int i = 0; i < 20; i++) {
        v.push_back(i);
        std::cout << "Size: " << v.size() << ", Capacity: " << v.capacity() << std::endl;
    }

    return 0;
}

출력 결과 : 
Size: 1, Capacity: 1
Size: 2, Capacity: 2
Size: 3, Capacity: 4
Size: 4, Capacity: 4
Size: 5, Capacity: 8
Size: 6, Capacity: 8
Size: 7, Capacity: 8
Size: 8, Capacity: 8
Size: 9, Capacity: 16
Size: 10, Capacity: 16
Size: 11, Capacity: 16
Size: 12, Capacity: 16
Size: 13, Capacity: 16
Size: 14, Capacity: 16
Size: 15, Capacity: 16
Size: 16, Capacity: 16
Size: 17, Capacity: 32
Size: 18, Capacity: 32
Size: 19, Capacity: 32
Size: 20, Capacity: 32